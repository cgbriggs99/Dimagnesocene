import os

set reference rhf

import numpy as np
import pickle
import math
import time

print(os.environ["SGE_TASK_ID"])

angle_param = np.linspace(0, 72, 10)[int(os.environ["SGE_TASK_ID"]) - 1]
alpha = angle_param / 180 * math.pi
 

mgcp = geometry(f""" 
    0 1
    symmetry c1
    units angstrom

    C
    C 1 dcc
    C 2 dcc 1 108
    C 3 dcc 2 108 1 0
    C 4 dcc 3 108 2 0
    C 1 drr 2 90  3 90
    C 2 drr 3 90  4 90
    C 3 drr 4 90  5 90
    C 8 dcc 7 108 6 0
    C 9 dcc 8 108 7 0
    H 1 dch 2 126 3 180
    H 2 dch 3 126 4 180
    H 3 dch 4 126 5 180
    H 4 dch 5 126 1 180
    H 5 dch 1 126 2 180
    H 6 dch 7 126 8 180
    H 7 dch 8 126 9 180
    H 8 dch 9 126 10 180
    H 9 dch 10 126 6 180
    H 10 dch 6 126 7 180
    Mg 1 dcbe 11 achbe 6 0
    Mg 6 dcbe 16 achbe 1 0

    dcc = 1.33
    drr = 6.12
    dch = 1.088
    dcbe = 2.23 
    achbe = 128.09
""")

# Translate to the center of mass.
mgcp.move_to_com()

# Change units to Bohr. There seems to be an implicit conversion somewhere.
mgcp.set_units(psi4.core.Bohr)

# Rotate so that the heavy atoms are on the z axis.
geo = list(zip([mgcp.symbol(i) for i in range(mgcp.nallatom())], list(mgcp.geometry().to_array())))

# Find the first heavy atom.
ez = None
for atom in geo :
    if atom[0].lower() in ["be", "mg", "ca", "sr", "ba"] :
        ez = atom[1]
        break
if ez is None :
    raise ArithmeticError("Could not find heavy atom!")

# Normalize.
ez = ez / np.linalg.norm(ez)

# Find the other two directions.
ex = np.array([1, 0, 0]) - np.dot(np.array([1, 0, 0]), ez) * ez
if np.linalg.norm(ex) < 1e-6 :
    ex = np.array([0, 0, 1]) - np.dot(np.array([0, 0, 1]), ez) * ez
ex = ex / np.linalg.norm(ex)

ey = np.array([0, 1, 0]) - np.dot(np.array([0, 1, 0]), ex) * ex - np.dot(np.array([0, 1, 0]), ez) * ez

if np.linalg.norm(ey) < 1e-6 :
    ey = np.array([1, 0, 0]) - np.dot(np.array([1, 0, 0]), ex) * ex - np.dot(np.array([1, 0, 0]), ez) * ez
    if np.linalg.norm(ey) < 1e-6 :
        ey = np.array([0, 0, 1]) - np.dot(np.array([0, 0, 1]), ex) * ex - np.dot(np.array([0, 0, 1]), ez) * ez
ey = ey / np.linalg.norm(ey)

# Make sure the coordinates are right-handed.
if np.dot(np.cross(ex, ey), ez) < 0 :
    ex, ey = ey, ex

positions = []
# Go through and rotate.
for i in range(mgcp.nallatom()) :
    vector = geo[i][1] 
    positions.append(np.array([np.dot(ex, vector), np.dot(ey, vector), np.dot(ez, vector)]))

# Rotate all atoms with a postitive z.
rot = np.array([[math.cos(alpha), -math.sin(alpha), 0], [math.sin(alpha), math.cos(alpha), 0], [0, 0, 1]])
for i in range(len(positions)) :
    if positions[i].item(2) > 0 :
        positions[i] = np.matmul(rot, positions[i])

# Generate new geometry.
geostr = "0 1\nsymmetry c1\nunits angstrom\n"

for i in range(len(positions)) :
    geostr += f"{mgcp.symbol(i)} {positions[i].item(0)} {positions[i].item(1)} {positions[i].item(2)}\n"

# Set new geometry.
mgcp = geometry(geostr)

set optking {
    frozen_dihedral = ("
        1 21 22 6
        2 21 22 7
        3 21 22 8
        4 21 22 9
        5 21 22 10
    ")
}

energy = optimize("b3lyp/cc-pVTZ")

mgcp.save_xyz_file("out/structs/dimgce_angle-" + str(os.environ["SGE_TASK_ID"]) + ".xyz", True)

fstr = ""
with open("out/structs/dimgce_angle-" + str(os.environ["SGE_TASK_ID"]) + ".xyz", "r") as fp :
    for line in fp :
        if len(line) == 0 :
            continue
        newline = line[0]
        for i in range(1, len(line)) :
            if line[i - 1].isupper() and line[i].isupper() :
                newline += line[i].lower()
            else :
                newline += line[i]
        if len(line) > 1 :
            newline += line[-1]
        fstr += newline
with open("out/structs/dimgce_angle-" + str(os.environ["SGE_TASK_ID"]) + ".xyz", "w") as fp :
    print(fstr, file = fp)

while os.path.isfile("out/lock.dimgce_angle_energies.dat") :
    time.sleep(0.03)
with open("out/lock.dimgce_angle_energies.dat", "w+") as _ :
    with open("out/dimgce_angle_energies.dat", "ba+") as fp :
        fp.write(pickle.dumps(angle_param))
        fp.write(pickle.dumps(energy))
os.remove("out/lock.dimgce_angle_energies.dat")

while os.path.isfile("out/lock.dimgce_angle_energies.txt") :
    time.sleep(0.03)

with open("out/lock.dimgce_angle_energies.txt", "w+") as _ :
    with open("out/dimgce_angle_energies.txt", "a+") as fp :
        print(f"Distance: {angle_param}, Energy: {energy}", file = fp)
os.remove("out/lock.dimgce_angle_energies.txt")
